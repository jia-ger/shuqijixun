https://atcoder.jp/contests/abc420/tasks/abc420_d

#include <iostream>
#include <vector>
#include <queue>
#include <climits>
using namespace std;

const int INF = INT_MAX;
const int dx[] = {1, -1, 0, 0};
const int dy[] = {0, 0, 1, -1};

struct State {
    int i;
    int j;
    int state;
    State(int i, int j, int state) : i(i), j(j), state(state) {}
};

int main() {
    int H, W;
    cin >> H >> W;
    vector<string> grid(H);
    int start_i, start_j, goal_i, goal_j;
    
    for (int i = 0; i < H; i++) {
        cin >> grid[i];
        for (int j = 0; j < W; j++) {
            if (grid[i][j] == 'S') {
                start_i = i;
                start_j = j;
            } else if (grid[i][j] == 'G') {
                goal_i = i;
                goal_j = j;
            }
        }
    }

    vector<vector<vector<int>>> dist(H, vector<vector<int>>(W, vector<int>(2, INF)));
    queue<State> q;

    dist[start_i][start_j][0] = 0;
    q.push(State(start_i, start_j, 0));

    while (!q.empty()) {
        State current = q.front();
        q.pop();
        int i = current.i;
        int j = current.j;
        int state = current.state;
        int d = dist[i][j][state];
        
        if (i == goal_i && j == goal_j) {
            cout << d << endl;
            return 0;
        }
        for (int dir = 0; dir < 4; dir++) {
            int ni = i + dx[dir];
            int nj = j + dy[dir];
            
            if (ni < 0 || ni >= H || nj < 0 || nj >= W) continue;

            char cell = grid[ni][nj];
            if (cell == '#') continue;

            int nstate =state; // 使用当前处理后的状态
            
            // 检查目标单元格是否可通行
            if (cell == 'o' || cell == 'x') {
                if (nstate == 0 && cell == 'x') continue;
                if (nstate == 1 && cell == 'o') continue;
            }

            // 如果目标单元格是开关，移动后会再次切换状态
            if (cell == '?') {
                nstate =!nstate;
            }

            if (dist[ni][nj][nstate] > d + 1) {
                dist[ni][nj][nstate] = d + 1;
                q.push(State(ni, nj, nstate));
            }
        }
    }

    cout << -1 << endl;
    return 0;
}
